use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set");
    let package_name = env::var("CARGO_PKG_NAME").expect("CARGO_PKG_NAME not set");
    let output_file = target_dir()
        .join("include")
        .join(format!("lib{}.h", package_name));

    std::fs::create_dir_all(output_file.parent().expect("Failed to get parent dir")).expect("Failed to create include dir")   ;
    let mut config = cbindgen::Config::default();
    config.language = cbindgen::Language::C;
    config.header = Some("/* Autogenerated by cbindgen. Do not edit. */".into());
    config.include_version = true;
    config.include_guard = Some("IROHFFI_H".into());
    config.pragma_once = true;
    config.usize_is_size_t = true;
    config.cpp_compat = false;
    config.export.include = vec!["ffi::*".to_string()];

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(&output_file);

    println!("cargo:rerun-if-changed=src/");
}

fn target_dir() -> PathBuf {
    if let Ok(target) = env::var("CARGO_TARGET_DIR") {
        PathBuf::from(target)
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set")).join("target")
    }
}